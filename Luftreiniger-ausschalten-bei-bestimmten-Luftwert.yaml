blueprint:
  name: Luftreiniger Auto-Schaltung (Einfach)
  description: |
    <br>
    <b>üìòDieser Blueprint schaltet den Luftreiniger nach Entit√§t, Schalter oder Schalter am Ger√§t ein und automatisch wieder aus. Zeitversatz nachdem die Aktion ausgef√ºhrt wird liegt bei 3min.</b>
    <br><br>
    üìÖ <b>Schalter oder Entit√§t</b>: Luftreiniger wird nach Schalter oder Entit√§t eingeschaltet und nach gesetztem Luftwert automatisch wieder abgeschaltet.<br>
    ‚è∞ <b>Automatische Abschaltung</b>: Luftreiniger wird nach gesetztem Luftwert und manueller Ausl√∂sung am Ger√§t automatisch wieder abgeschaltet.
  domain: automation
  input:
    manual_toggle:
      name: Schalters bzw. Entit√§t
      description: Schalter oder Entit√§t, um den Luftreiniger manuell zu aktivieren und automatisch abzuschalten.
      selector:
        entity:
          domain: 
            - input_boolean
            - switch
            - light
            - fan
            - binary_sensor
    manual_toggle_state:
      name: Zustand des Schalters bzw. der Entit√§t
      description: Zustand, bei dem die Automatisierung ausgel√∂st wird (on oder off).
      default: "on"
      selector:
        select:
          options:
            - "on"
            - "off"
    pm2_5_sensor:
      name: PM2.5 Sensor
      description: PM2.5 Sensor f√ºr den Hauptluftreiniger
      selector:
        entity:
          domain: sensor
    fan_entity:
      name: Luftreiniger Entit√§t
      description: Entit√§t des Hauptluftreinigers
      selector:
        entity:
          domain: fan
    ppm_threshold:
      name: PM2.5 Grenzwert
      description: Grenzwert (PPM) f√ºr das Abschalten des Luftreinigers
      default: 50
      selector:
        number:
          min: 1
          max: 120
          step: 1

trigger:
  - platform: state
    entity_id: !input pm2_5_sensor
    id: autooff
  - platform: state
    entity_id: !input manual_toggle
    to: !input manual_toggle_state
    id: manual

condition: []

action:
  - choose:
      # Automatische Steuerung basierend auf PM2.5
      - conditions:
          - condition: template
            value_template: "{{ trigger.id == 'autooff' }}"
          - condition: state
            entity_id: !input fan_entity
            state: "on"
        sequence:
          - delay:
              minutes: 3  # 3 Minuten warten, um den realen PM2.5-Wert zu ermitteln
          - condition: numeric_state
            entity_id: !input pm2_5_sensor
            below: !input ppm_threshold  # Pr√ºfen, ob der PM2.5-Wert unter dem Grenzwert liegt
          - service: fan.turn_off
            target:
              entity_id: !input fan_entity
      # Manuelle Steuerung
      - conditions:
          - condition: template
            value_template: "{{ trigger.id == 'manual' }}"
        sequence:
          - service: fan.turn_on
            target:
              entity_id: !input fan_entity
          - delay:
              minutes: 3  # 3 Minuten warten, um den realen PM2.5-Wert zu ermitteln
          - condition: numeric_state
            entity_id: !input pm2_5_sensor
            below: !input ppm_threshold  # Pr√ºfen, ob der PM2.5-Wert unter dem Grenzwert liegt
          - service: fan.turn_off
            target:
              entity_id: !input fan_entity

mode: single
